/* Programatically-generated array of squares from the Fibonacci sequence -- 
 * can be used to contruct a golden spiral. */

/* The fibonacci mixin takes as arguments:
 *   n: the total number of squares in the fibonacci array
 *   direction: an integer from 0 to 3 to choose the rotation on the array
 * 
 * The mixin will define a container class .fibonacci-direction-n, sized in em, 
 * and n inner classes .fibonacci-direction-i-n, sized and positioned in %. */
@mixin fibonacci($n, $direction) {
    $size: ();
    $top: ();
    $left: ();
    $height: if($direction % 2 == 0, 0, 1);
    $width: if($direction % 2 == 1, 0, 1);

    $a: 0;
    $b: 1;
    @for $i from 1 through $n {
        $dir: ($i + $direction) % 4;
        @if $dir == 1 {
            @if length($size) > 0 { @for $j from 1 through length($size) {
                $top: set-nth($top, $j, nth($top, $j) + $b);
            } }
            $top: append($top, 0);
            $left: append($left, 0);
            $height: $height + $b;
        } @else if $dir == 2 {
            $top: append($top, 0);
            $left: append($left, $width);
            $width: $width + $b;
        } @else if $dir == 3 {
            $top: append($top, $height);
            $left: append($left, 0);
            $height: $height + $b;
        } @else {
            @if length($top) > 0 { @for $j from 1 through length($size) {
                $left: set-nth($left, $j, nth($left, $j) + $b);
            } }
            $top: append($top, 0);
            $left: append($left, 0);
            $width: $width + $b;
        }
        $size: append($size, $b);
        $tmp: $a + $b;
        $a: $b;
        $b: $tmp;
    }

    .fibonacci-#{$direction}-#{$n} {
        position: relative;
        width: #{$width}em;
        height: #{$height}em;
    }

    @for $i from 1 through $n {
        .fibonacci-#{$direction}-#{$i}-#{$n} {
            position: absolute;
            width: percentage(nth($size, $i) / $width);
            height: percentage(nth($size, $i) / $height);
            top: percentage(nth($top, $i) / $height);
            left: percentage(nth($left, $i) / $width);
            border: 1px solid #000;
            overflow: hidden;
        }
    }
}

$maxN: 9;
@for $n from 1 through $maxN {
    @include fibonacci($n, 0);
    @include fibonacci($n, 1);
    @include fibonacci($n, 2);
    @include fibonacci($n, 3);
}
